import gulp from "gulp";
import esbuild from "esbuild";
import autoprefixer from "gulp-autoprefixer";
import cleanCSS from "gulp-clean-css";
import rename from "gulp-rename";
import dartSass from "sass";
import gulpSass from "gulp-sass";
const sass = gulpSass(dartSass);

import rev from "gulp-rev";
import revReplace from "gulp-rev-replace";
import revDel from "gulp-rev-delete-original";
import path from "path";
import through from "through2";

// JavaScript tasks

gulp.task("build-js", function (done) {
    esbuild.build({
        entryPoints: ["./App/src/wwwroot/js/pages/**/*.js"],
        bundle: true,
        minify: true,
        sourcemap: false,
        outdir: "./App/public/js",
    }).then(() => done()).catch(() => done("Build failed"));
});

gulp.task("build-js-components", function (done) {
    esbuild.build({
        entryPoints: ["./App/src/wwwroot/js/components/main.js"],
        bundle: true,
        minify: true,
        sourcemap: false,
        outfile: "./App/public/js/components.js",
    }).then(() => done()).catch(() => done("Build failed"));
});

// Task to hash JS filenames
gulp.task("rev-js", function () {
    return gulp.src("./App/public/js/**/*.js") // Adjust the path to your JS files
        .pipe(rev())
        .pipe(revDel())
        .pipe(through.obj(function (file, enc, cb) {
            // Directly use the hash for renaming
            // The revHash property contains the hash generated by gulp-rev
            const hash = file.revHash;
            const extension = path.extname(file.path);
            file.path = path.join(file.base, `${hash}${extension}`);
            cb(null, file);
        }))
        .pipe(gulp.dest("./App/public/js")) // Output directory for hashed JS files
        .pipe(rev.manifest())
        .pipe(gulp.dest("./")); // Output directory for the rev manifest
});

// Task to update HTML references
gulp.task("update-html", function () {
    let manifest = gulp.src("./rev-manifest.json"); // Path to the generated manifest file

    function adjustHtmlPaths() {
        return through.obj(function (file, enc, cb) {
            if (file.isBuffer()) {
                let content = file.contents.toString();
                // This regex finds script src references that could have subdirectories
                // and normalizes them to a flat structure expected by the manifest.
                // Adjust the regex as necessary to match your project's HTML structure.
                content = content.replace(/(src="\/js\/)([^"]+\/)?([^"]+\.js")/g, (match, p1, p2, p3) => `${p1}${p3}`);
                file.contents = Buffer.from(content);
            }
            cb(null, file);
        });
    }

    return gulp.src("./App/src/Pages/**/*.html") // Adjust the path to your HTML files
        .pipe(adjustHtmlPaths())
        .pipe(revReplace({
            manifest: manifest,
        }))
        .pipe(gulp.dest("./App/src/Pages")); // Output directory for updated HTML files
});

gulp.task("build-scss", function () {
    return gulp.src("./App/src/wwwroot/scss/main.scss")
        .pipe(sass({ outputStyle: "compressed" }).on("error", sass.logError))
        .pipe(autoprefixer({
            overrideBrowserslist: [
                ">0.15%",
                "defaults",
                "not dead"
            ],
            cascade: false
        }))
        .pipe(gulp.dest("./App/public/css"));
});

gulp.task("build-css", () => {
    return gulp.src("./App/src/wwwroot/css/*.css")
        .pipe(cleanCSS({ compatibility: "ie8" }))
        .pipe(rename({
            suffix: ".min"
        }))
        .pipe(gulp.dest("./App/public/css"));
});

// Default task
gulp.task(
    "default",
    gulp.parallel(
        gulp.series("build-js", "build-js-components", "rev-js", "update-html"),
        gulp.series("build-css", "build-scss")
    ));